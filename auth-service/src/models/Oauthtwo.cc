/**
 *
 *  Oauthtwo.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */
// NOLINTBEGIN
#include "Oauthtwo.h"

#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::famy_auth;

const std::string Oauthtwo::Cols::_id = "id";
const std::string Oauthtwo::Cols::_provider_id = "provider_id";
const std::string Oauthtwo::Cols::_refresh_token = "refresh_token";
const std::string Oauthtwo::primaryKeyName = "id";
const bool Oauthtwo::hasPrimaryKey = true;
const std::string Oauthtwo::tableName = "oauthtwo";

const std::vector<typename Oauthtwo::MetaData> Oauthtwo::metaData_ = {
  {           "id",     "int64_t", "bigint", 8, 1, 1, 1},
  {  "provider_id",     "int64_t", "bigint", 8, 0, 0, 0},
  {"refresh_token", "std::string",   "text", 0, 0, 0, 0}
};

const std::string&
Oauthtwo::getColumnName(size_t index) noexcept(false)
{
  assert(index < metaData_.size());
  return metaData_ [index].colName_;
}

Oauthtwo::Oauthtwo(const Row& r, const ssize_t indexOffset) noexcept
{
  if(indexOffset < 0)
  {
    if(! r ["id"].isNull())
    {
      id_ = std::make_shared<int64_t>(r ["id"].as<int64_t>());
    }
    if(! r ["provider_id"].isNull())
    {
      providerId_ = std::make_shared<int64_t>(r ["provider_id"].as<int64_t>());
    }
    if(! r ["refresh_token"].isNull())
    {
      refreshToken_ =
        std::make_shared<std::string>(r ["refresh_token"].as<std::string>());
    }
  }
  else
  {
    size_t offset = (size_t)indexOffset;
    if(offset + 3 > r.size())
    {
      LOG_FATAL << "Invalid SQL result for this model";
      return;
    }
    size_t index;
    index = offset + 0;
    if(! r [index].isNull())
    {
      id_ = std::make_shared<int64_t>(r [index].as<int64_t>());
    }
    index = offset + 1;
    if(! r [index].isNull())
    {
      providerId_ = std::make_shared<int64_t>(r [index].as<int64_t>());
    }
    index = offset + 2;
    if(! r [index].isNull())
    {
      refreshToken_ =
        std::make_shared<std::string>(r [index].as<std::string>());
    }
  }
}

Oauthtwo::Oauthtwo(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector
) noexcept(false)
{
  if(pMasqueradingVector.size() != 3)
  {
    LOG_ERROR << "Bad masquerading vector";
    return;
  }
  if(! pMasqueradingVector [0].empty() && pJson.isMember(pMasqueradingVector [0]))
  {
    dirtyFlag_ [0] = true;
    if(! pJson [pMasqueradingVector [0]].isNull())
    {
      id_ = std::make_shared<int64_t>(
        (int64_t)pJson [pMasqueradingVector [0]].asInt64()
      );
    }
  }
  if(! pMasqueradingVector [1].empty() && pJson.isMember(pMasqueradingVector [1]))
  {
    dirtyFlag_ [1] = true;
    if(! pJson [pMasqueradingVector [1]].isNull())
    {
      providerId_ = std::make_shared<int64_t>(
        (int64_t)pJson [pMasqueradingVector [1]].asInt64()
      );
    }
  }
  if(! pMasqueradingVector [2].empty() && pJson.isMember(pMasqueradingVector [2]))
  {
    dirtyFlag_ [2] = true;
    if(! pJson [pMasqueradingVector [2]].isNull())
    {
      refreshToken_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [2]].asString()
        );
    }
  }
}

Oauthtwo::Oauthtwo(const Json::Value& pJson) noexcept(false)
{
  if(pJson.isMember("id"))
  {
    dirtyFlag_ [0] = true;
    if(! pJson ["id"].isNull())
    {
      id_ = std::make_shared<int64_t>((int64_t)pJson ["id"].asInt64());
    }
  }
  if(pJson.isMember("provider_id"))
  {
    dirtyFlag_ [1] = true;
    if(! pJson ["provider_id"].isNull())
    {
      providerId_ =
        std::make_shared<int64_t>((int64_t)pJson ["provider_id"].asInt64());
    }
  }
  if(pJson.isMember("refresh_token"))
  {
    dirtyFlag_ [2] = true;
    if(! pJson ["refresh_token"].isNull())
    {
      refreshToken_ =
        std::make_shared<std::string>(pJson ["refresh_token"].asString());
    }
  }
}

void
Oauthtwo::updateByMasqueradedJson(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector
) noexcept(false)
{
  if(pMasqueradingVector.size() != 3)
  {
    LOG_ERROR << "Bad masquerading vector";
    return;
  }
  if(! pMasqueradingVector [0].empty() && pJson.isMember(pMasqueradingVector [0]))
  {
    if(! pJson [pMasqueradingVector [0]].isNull())
    {
      id_ = std::make_shared<int64_t>(
        (int64_t)pJson [pMasqueradingVector [0]].asInt64()
      );
    }
  }
  if(! pMasqueradingVector [1].empty() && pJson.isMember(pMasqueradingVector [1]))
  {
    dirtyFlag_ [1] = true;
    if(! pJson [pMasqueradingVector [1]].isNull())
    {
      providerId_ = std::make_shared<int64_t>(
        (int64_t)pJson [pMasqueradingVector [1]].asInt64()
      );
    }
  }
  if(! pMasqueradingVector [2].empty() && pJson.isMember(pMasqueradingVector [2]))
  {
    dirtyFlag_ [2] = true;
    if(! pJson [pMasqueradingVector [2]].isNull())
    {
      refreshToken_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [2]].asString()
        );
    }
  }
}

void
Oauthtwo::updateByJson(const Json::Value& pJson) noexcept(false)
{
  if(pJson.isMember("id"))
  {
    if(! pJson ["id"].isNull())
    {
      id_ = std::make_shared<int64_t>((int64_t)pJson ["id"].asInt64());
    }
  }
  if(pJson.isMember("provider_id"))
  {
    dirtyFlag_ [1] = true;
    if(! pJson ["provider_id"].isNull())
    {
      providerId_ =
        std::make_shared<int64_t>((int64_t)pJson ["provider_id"].asInt64());
    }
  }
  if(pJson.isMember("refresh_token"))
  {
    dirtyFlag_ [2] = true;
    if(! pJson ["refresh_token"].isNull())
    {
      refreshToken_ =
        std::make_shared<std::string>(pJson ["refresh_token"].asString());
    }
  }
}

const int64_t&
Oauthtwo::getValueOfId() const noexcept
{
  const static int64_t defaultValue = int64_t();
  if(id_)
  {
    return *id_;
  }
  return defaultValue;
}

const std::shared_ptr<int64_t>&
Oauthtwo::getId() const noexcept
{
  return id_;
}

void
Oauthtwo::setId(const int64_t& pId) noexcept
{
  id_ = std::make_shared<int64_t>(pId);
  dirtyFlag_ [0] = true;
}

const typename Oauthtwo::PrimaryKeyType&
Oauthtwo::getPrimaryKey() const
{
  assert(id_);
  return *id_;
}

const int64_t&
Oauthtwo::getValueOfProviderId() const noexcept
{
  const static int64_t defaultValue = int64_t();
  if(providerId_)
  {
    return *providerId_;
  }
  return defaultValue;
}

const std::shared_ptr<int64_t>&
Oauthtwo::getProviderId() const noexcept
{
  return providerId_;
}

void
Oauthtwo::setProviderId(const int64_t& pProviderId) noexcept
{
  providerId_ = std::make_shared<int64_t>(pProviderId);
  dirtyFlag_ [1] = true;
}

void
Oauthtwo::setProviderIdToNull() noexcept
{
  providerId_.reset();
  dirtyFlag_ [1] = true;
}

const std::string&
Oauthtwo::getValueOfRefreshToken() const noexcept
{
  const static std::string defaultValue = std::string();
  if(refreshToken_)
  {
    return *refreshToken_;
  }
  return defaultValue;
}

const std::shared_ptr<std::string>&
Oauthtwo::getRefreshToken() const noexcept
{
  return refreshToken_;
}

void
Oauthtwo::setRefreshToken(const std::string& pRefreshToken) noexcept
{
  refreshToken_ = std::make_shared<std::string>(pRefreshToken);
  dirtyFlag_ [2] = true;
}

void
Oauthtwo::setRefreshToken(std::string&& pRefreshToken) noexcept
{
  refreshToken_ = std::make_shared<std::string>(std::move(pRefreshToken));
  dirtyFlag_ [2] = true;
}

void
Oauthtwo::setRefreshTokenToNull() noexcept
{
  refreshToken_.reset();
  dirtyFlag_ [2] = true;
}

void
Oauthtwo::updateId(const uint64_t id)
{
}

const std::vector<std::string>&
Oauthtwo::insertColumns() noexcept
{
  static const std::vector<std::string> inCols = {
    "provider_id",
    "refresh_token"
  };
  return inCols;
}

void
Oauthtwo::outputArgs(drogon::orm::internal::SqlBinder& binder) const
{
  if(dirtyFlag_ [1])
  {
    if(getProviderId())
    {
      binder << getValueOfProviderId();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [2])
  {
    if(getRefreshToken())
    {
      binder << getValueOfRefreshToken();
    }
    else
    {
      binder << nullptr;
    }
  }
}

const std::vector<std::string>
Oauthtwo::updateColumns() const
{
  std::vector<std::string> ret;
  if(dirtyFlag_ [1])
  {
    ret.push_back(getColumnName(1));
  }
  if(dirtyFlag_ [2])
  {
    ret.push_back(getColumnName(2));
  }
  return ret;
}

void
Oauthtwo::updateArgs(drogon::orm::internal::SqlBinder& binder) const
{
  if(dirtyFlag_ [1])
  {
    if(getProviderId())
    {
      binder << getValueOfProviderId();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [2])
  {
    if(getRefreshToken())
    {
      binder << getValueOfRefreshToken();
    }
    else
    {
      binder << nullptr;
    }
  }
}

Json::Value
Oauthtwo::toJson() const
{
  Json::Value ret;
  if(getId())
  {
    ret ["id"] = (Json::Int64)getValueOfId();
  }
  else
  {
    ret ["id"] = Json::Value();
  }
  if(getProviderId())
  {
    ret ["provider_id"] = (Json::Int64)getValueOfProviderId();
  }
  else
  {
    ret ["provider_id"] = Json::Value();
  }
  if(getRefreshToken())
  {
    ret ["refresh_token"] = getValueOfRefreshToken();
  }
  else
  {
    ret ["refresh_token"] = Json::Value();
  }
  return ret;
}

Json::Value
Oauthtwo::toMasqueradedJson(const std::vector<std::string>& pMasqueradingVector
) const
{
  Json::Value ret;
  if(pMasqueradingVector.size() == 3)
  {
    if(! pMasqueradingVector [0].empty())
    {
      if(getId())
      {
        ret [pMasqueradingVector [0]] = (Json::Int64)getValueOfId();
      }
      else
      {
        ret [pMasqueradingVector [0]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [1].empty())
    {
      if(getProviderId())
      {
        ret [pMasqueradingVector [1]] = (Json::Int64)getValueOfProviderId();
      }
      else
      {
        ret [pMasqueradingVector [1]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [2].empty())
    {
      if(getRefreshToken())
      {
        ret [pMasqueradingVector [2]] = getValueOfRefreshToken();
      }
      else
      {
        ret [pMasqueradingVector [2]] = Json::Value();
      }
    }
    return ret;
  }
  LOG_ERROR << "Masquerade failed";
  if(getId())
  {
    ret ["id"] = (Json::Int64)getValueOfId();
  }
  else
  {
    ret ["id"] = Json::Value();
  }
  if(getProviderId())
  {
    ret ["provider_id"] = (Json::Int64)getValueOfProviderId();
  }
  else
  {
    ret ["provider_id"] = Json::Value();
  }
  if(getRefreshToken())
  {
    ret ["refresh_token"] = getValueOfRefreshToken();
  }
  else
  {
    ret ["refresh_token"] = Json::Value();
  }
  return ret;
}

bool
Oauthtwo::validateJsonForCreation(const Json::Value& pJson, std::string& err)
{
  if(pJson.isMember("id"))
  {
    if(! validJsonOfField(0, "id", pJson ["id"], err, true))
    {
      return false;
    }
  }
  if(pJson.isMember("provider_id"))
  {
    if(! validJsonOfField(1, "provider_id", pJson ["provider_id"], err, true))
    {
      return false;
    }
  }
  if(pJson.isMember("refresh_token"))
  {
    if(! validJsonOfField(
         2,
         "refresh_token",
         pJson ["refresh_token"],
         err,
         true
       ))
    {
      return false;
    }
  }
  return true;
}

bool
Oauthtwo::validateMasqueradedJsonForCreation(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector,
  std::string& err
)
{
  if(pMasqueradingVector.size() != 3)
  {
    err = "Bad masquerading vector";
    return false;
  }
  try
  {
    if(! pMasqueradingVector [0].empty())
    {
      if(pJson.isMember(pMasqueradingVector [0]))
      {
        if(! validJsonOfField(
             0,
             pMasqueradingVector [0],
             pJson [pMasqueradingVector [0]],
             err,
             true
           ))
        {
          return false;
        }
      }
    }
    if(! pMasqueradingVector [1].empty())
    {
      if(pJson.isMember(pMasqueradingVector [1]))
      {
        if(! validJsonOfField(
             1,
             pMasqueradingVector [1],
             pJson [pMasqueradingVector [1]],
             err,
             true
           ))
        {
          return false;
        }
      }
    }
    if(! pMasqueradingVector [2].empty())
    {
      if(pJson.isMember(pMasqueradingVector [2]))
      {
        if(! validJsonOfField(
             2,
             pMasqueradingVector [2],
             pJson [pMasqueradingVector [2]],
             err,
             true
           ))
        {
          return false;
        }
      }
    }
  }
  catch(const Json::LogicError& e)
  {
    err = e.what();
    return false;
  }
  return true;
}

bool
Oauthtwo::validateJsonForUpdate(const Json::Value& pJson, std::string& err)
{
  if(pJson.isMember("id"))
  {
    if(! validJsonOfField(0, "id", pJson ["id"], err, false))
    {
      return false;
    }
  }
  else
  {
    err = "The value of primary key must be set in the json object for update";
    return false;
  }
  if(pJson.isMember("provider_id"))
  {
    if(! validJsonOfField(1, "provider_id", pJson ["provider_id"], err, false))
    {
      return false;
    }
  }
  if(pJson.isMember("refresh_token"))
  {
    if(! validJsonOfField(
         2,
         "refresh_token",
         pJson ["refresh_token"],
         err,
         false
       ))
    {
      return false;
    }
  }
  return true;
}

bool
Oauthtwo::validateMasqueradedJsonForUpdate(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector,
  std::string& err
)
{
  if(pMasqueradingVector.size() != 3)
  {
    err = "Bad masquerading vector";
    return false;
  }
  try
  {
    if(! pMasqueradingVector [0].empty() && pJson.isMember(pMasqueradingVector [0]))
    {
      if(! validJsonOfField(
           0,
           pMasqueradingVector [0],
           pJson [pMasqueradingVector [0]],
           err,
           false
         ))
      {
        return false;
      }
    }
    else
    {
      err =
        "The value of primary key must be set in the json object for update";
      return false;
    }
    if(! pMasqueradingVector [1].empty() && pJson.isMember(pMasqueradingVector [1]))
    {
      if(! validJsonOfField(
           1,
           pMasqueradingVector [1],
           pJson [pMasqueradingVector [1]],
           err,
           false
         ))
      {
        return false;
      }
    }
    if(! pMasqueradingVector [2].empty() && pJson.isMember(pMasqueradingVector [2]))
    {
      if(! validJsonOfField(
           2,
           pMasqueradingVector [2],
           pJson [pMasqueradingVector [2]],
           err,
           false
         ))
      {
        return false;
      }
    }
  }
  catch(const Json::LogicError& e)
  {
    err = e.what();
    return false;
  }
  return true;
}

bool
Oauthtwo::validJsonOfField(
  size_t index,
  const std::string& fieldName,
  const Json::Value& pJson,
  std::string& err,
  bool isForCreation
)
{
  switch(index)
  {
    case 0:
      if(pJson.isNull())
      {
        err = "The " + fieldName + " column cannot be null";
        return false;
      }
      if(isForCreation)
      {
        err = "The automatic primary key cannot be set";
        return false;
      }
      if(! pJson.isInt64())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      break;
    case 1:
      if(pJson.isNull())
      {
        return true;
      }
      if(! pJson.isInt64())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      break;
    case 2:
      if(pJson.isNull())
      {
        return true;
      }
      if(! pJson.isString())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      break;
    default:
      err = "Internal error in the server";
      return false;
  }
  return true;
}

// NOLINTEND
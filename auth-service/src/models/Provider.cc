/**
 *
 *  Provider.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */
// NOLINTBEGIN
#include "Provider.h"

#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::famy_auth;

const std::string Provider::Cols::_id = "id";
const std::string Provider::Cols::_name = "name";
const std::string Provider::Cols::_wsep = "wsep";
const std::string Provider::primaryKeyName = "id";
const bool Provider::hasPrimaryKey = true;
const std::string Provider::tableName = "provider";

const std::vector<typename Provider::MetaData> Provider::metaData_ = {
  {  "id",     "int64_t",            "bigint",   8, 1, 1, 1},
  {"name", "std::string", "character varying",  50, 0, 0, 0},
  {"wsep", "std::string", "character varying", 200, 0, 0, 0}
};

const std::string&
Provider::getColumnName(size_t index) noexcept(false)
{
  assert(index < metaData_.size());
  return metaData_ [index].colName_;
}

Provider::Provider(const Row& r, const ssize_t indexOffset) noexcept
{
  if(indexOffset < 0)
  {
    if(! r ["id"].isNull())
    {
      id_ = std::make_shared<int64_t>(r ["id"].as<int64_t>());
    }
    if(! r ["name"].isNull())
    {
      name_ = std::make_shared<std::string>(r ["name"].as<std::string>());
    }
    if(! r ["wsep"].isNull())
    {
      wsep_ = std::make_shared<std::string>(r ["wsep"].as<std::string>());
    }
  }
  else
  {
    size_t offset = (size_t)indexOffset;
    if(offset + 3 > r.size())
    {
      LOG_FATAL << "Invalid SQL result for this model";
      return;
    }
    size_t index;
    index = offset + 0;
    if(! r [index].isNull())
    {
      id_ = std::make_shared<int64_t>(r [index].as<int64_t>());
    }
    index = offset + 1;
    if(! r [index].isNull())
    {
      name_ = std::make_shared<std::string>(r [index].as<std::string>());
    }
    index = offset + 2;
    if(! r [index].isNull())
    {
      wsep_ = std::make_shared<std::string>(r [index].as<std::string>());
    }
  }
}

Provider::Provider(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector
) noexcept(false)
{
  if(pMasqueradingVector.size() != 3)
  {
    LOG_ERROR << "Bad masquerading vector";
    return;
  }
  if(! pMasqueradingVector [0].empty() && pJson.isMember(pMasqueradingVector [0]))
  {
    dirtyFlag_ [0] = true;
    if(! pJson [pMasqueradingVector [0]].isNull())
    {
      id_ = std::make_shared<int64_t>(
        (int64_t)pJson [pMasqueradingVector [0]].asInt64()
      );
    }
  }
  if(! pMasqueradingVector [1].empty() && pJson.isMember(pMasqueradingVector [1]))
  {
    dirtyFlag_ [1] = true;
    if(! pJson [pMasqueradingVector [1]].isNull())
    {
      name_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [1]].asString()
        );
    }
  }
  if(! pMasqueradingVector [2].empty() && pJson.isMember(pMasqueradingVector [2]))
  {
    dirtyFlag_ [2] = true;
    if(! pJson [pMasqueradingVector [2]].isNull())
    {
      wsep_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [2]].asString()
        );
    }
  }
}

Provider::Provider(const Json::Value& pJson) noexcept(false)
{
  if(pJson.isMember("id"))
  {
    dirtyFlag_ [0] = true;
    if(! pJson ["id"].isNull())
    {
      id_ = std::make_shared<int64_t>((int64_t)pJson ["id"].asInt64());
    }
  }
  if(pJson.isMember("name"))
  {
    dirtyFlag_ [1] = true;
    if(! pJson ["name"].isNull())
    {
      name_ = std::make_shared<std::string>(pJson ["name"].asString());
    }
  }
  if(pJson.isMember("wsep"))
  {
    dirtyFlag_ [2] = true;
    if(! pJson ["wsep"].isNull())
    {
      wsep_ = std::make_shared<std::string>(pJson ["wsep"].asString());
    }
  }
}

void
Provider::updateByMasqueradedJson(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector
) noexcept(false)
{
  if(pMasqueradingVector.size() != 3)
  {
    LOG_ERROR << "Bad masquerading vector";
    return;
  }
  if(! pMasqueradingVector [0].empty() && pJson.isMember(pMasqueradingVector [0]))
  {
    if(! pJson [pMasqueradingVector [0]].isNull())
    {
      id_ = std::make_shared<int64_t>(
        (int64_t)pJson [pMasqueradingVector [0]].asInt64()
      );
    }
  }
  if(! pMasqueradingVector [1].empty() && pJson.isMember(pMasqueradingVector [1]))
  {
    dirtyFlag_ [1] = true;
    if(! pJson [pMasqueradingVector [1]].isNull())
    {
      name_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [1]].asString()
        );
    }
  }
  if(! pMasqueradingVector [2].empty() && pJson.isMember(pMasqueradingVector [2]))
  {
    dirtyFlag_ [2] = true;
    if(! pJson [pMasqueradingVector [2]].isNull())
    {
      wsep_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [2]].asString()
        );
    }
  }
}

void
Provider::updateByJson(const Json::Value& pJson) noexcept(false)
{
  if(pJson.isMember("id"))
  {
    if(! pJson ["id"].isNull())
    {
      id_ = std::make_shared<int64_t>((int64_t)pJson ["id"].asInt64());
    }
  }
  if(pJson.isMember("name"))
  {
    dirtyFlag_ [1] = true;
    if(! pJson ["name"].isNull())
    {
      name_ = std::make_shared<std::string>(pJson ["name"].asString());
    }
  }
  if(pJson.isMember("wsep"))
  {
    dirtyFlag_ [2] = true;
    if(! pJson ["wsep"].isNull())
    {
      wsep_ = std::make_shared<std::string>(pJson ["wsep"].asString());
    }
  }
}

const int64_t&
Provider::getValueOfId() const noexcept
{
  const static int64_t defaultValue = int64_t();
  if(id_)
  {
    return *id_;
  }
  return defaultValue;
}

const std::shared_ptr<int64_t>&
Provider::getId() const noexcept
{
  return id_;
}

void
Provider::setId(const int64_t& pId) noexcept
{
  id_ = std::make_shared<int64_t>(pId);
  dirtyFlag_ [0] = true;
}

const typename Provider::PrimaryKeyType&
Provider::getPrimaryKey() const
{
  assert(id_);
  return *id_;
}

const std::string&
Provider::getValueOfName() const noexcept
{
  const static std::string defaultValue = std::string();
  if(name_)
  {
    return *name_;
  }
  return defaultValue;
}

const std::shared_ptr<std::string>&
Provider::getName() const noexcept
{
  return name_;
}

void
Provider::setName(const std::string& pName) noexcept
{
  name_ = std::make_shared<std::string>(pName);
  dirtyFlag_ [1] = true;
}

void
Provider::setName(std::string&& pName) noexcept
{
  name_ = std::make_shared<std::string>(std::move(pName));
  dirtyFlag_ [1] = true;
}

void
Provider::setNameToNull() noexcept
{
  name_.reset();
  dirtyFlag_ [1] = true;
}

const std::string&
Provider::getValueOfWsep() const noexcept
{
  const static std::string defaultValue = std::string();
  if(wsep_)
  {
    return *wsep_;
  }
  return defaultValue;
}

const std::shared_ptr<std::string>&
Provider::getWsep() const noexcept
{
  return wsep_;
}

void
Provider::setWsep(const std::string& pWsep) noexcept
{
  wsep_ = std::make_shared<std::string>(pWsep);
  dirtyFlag_ [2] = true;
}

void
Provider::setWsep(std::string&& pWsep) noexcept
{
  wsep_ = std::make_shared<std::string>(std::move(pWsep));
  dirtyFlag_ [2] = true;
}

void
Provider::setWsepToNull() noexcept
{
  wsep_.reset();
  dirtyFlag_ [2] = true;
}

void
Provider::updateId(const uint64_t id)
{
}

const std::vector<std::string>&
Provider::insertColumns() noexcept
{
  static const std::vector<std::string> inCols = {"name", "wsep"};
  return inCols;
}

void
Provider::outputArgs(drogon::orm::internal::SqlBinder& binder) const
{
  if(dirtyFlag_ [1])
  {
    if(getName())
    {
      binder << getValueOfName();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [2])
  {
    if(getWsep())
    {
      binder << getValueOfWsep();
    }
    else
    {
      binder << nullptr;
    }
  }
}

const std::vector<std::string>
Provider::updateColumns() const
{
  std::vector<std::string> ret;
  if(dirtyFlag_ [1])
  {
    ret.push_back(getColumnName(1));
  }
  if(dirtyFlag_ [2])
  {
    ret.push_back(getColumnName(2));
  }
  return ret;
}

void
Provider::updateArgs(drogon::orm::internal::SqlBinder& binder) const
{
  if(dirtyFlag_ [1])
  {
    if(getName())
    {
      binder << getValueOfName();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [2])
  {
    if(getWsep())
    {
      binder << getValueOfWsep();
    }
    else
    {
      binder << nullptr;
    }
  }
}

Json::Value
Provider::toJson() const
{
  Json::Value ret;
  if(getId())
  {
    ret ["id"] = (Json::Int64)getValueOfId();
  }
  else
  {
    ret ["id"] = Json::Value();
  }
  if(getName())
  {
    ret ["name"] = getValueOfName();
  }
  else
  {
    ret ["name"] = Json::Value();
  }
  if(getWsep())
  {
    ret ["wsep"] = getValueOfWsep();
  }
  else
  {
    ret ["wsep"] = Json::Value();
  }
  return ret;
}

Json::Value
Provider::toMasqueradedJson(const std::vector<std::string>& pMasqueradingVector
) const
{
  Json::Value ret;
  if(pMasqueradingVector.size() == 3)
  {
    if(! pMasqueradingVector [0].empty())
    {
      if(getId())
      {
        ret [pMasqueradingVector [0]] = (Json::Int64)getValueOfId();
      }
      else
      {
        ret [pMasqueradingVector [0]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [1].empty())
    {
      if(getName())
      {
        ret [pMasqueradingVector [1]] = getValueOfName();
      }
      else
      {
        ret [pMasqueradingVector [1]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [2].empty())
    {
      if(getWsep())
      {
        ret [pMasqueradingVector [2]] = getValueOfWsep();
      }
      else
      {
        ret [pMasqueradingVector [2]] = Json::Value();
      }
    }
    return ret;
  }
  LOG_ERROR << "Masquerade failed";
  if(getId())
  {
    ret ["id"] = (Json::Int64)getValueOfId();
  }
  else
  {
    ret ["id"] = Json::Value();
  }
  if(getName())
  {
    ret ["name"] = getValueOfName();
  }
  else
  {
    ret ["name"] = Json::Value();
  }
  if(getWsep())
  {
    ret ["wsep"] = getValueOfWsep();
  }
  else
  {
    ret ["wsep"] = Json::Value();
  }
  return ret;
}

bool
Provider::validateJsonForCreation(const Json::Value& pJson, std::string& err)
{
  if(pJson.isMember("id"))
  {
    if(! validJsonOfField(0, "id", pJson ["id"], err, true))
    {
      return false;
    }
  }
  if(pJson.isMember("name"))
  {
    if(! validJsonOfField(1, "name", pJson ["name"], err, true))
    {
      return false;
    }
  }
  if(pJson.isMember("wsep"))
  {
    if(! validJsonOfField(2, "wsep", pJson ["wsep"], err, true))
    {
      return false;
    }
  }
  return true;
}

bool
Provider::validateMasqueradedJsonForCreation(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector,
  std::string& err
)
{
  if(pMasqueradingVector.size() != 3)
  {
    err = "Bad masquerading vector";
    return false;
  }
  try
  {
    if(! pMasqueradingVector [0].empty())
    {
      if(pJson.isMember(pMasqueradingVector [0]))
      {
        if(! validJsonOfField(
             0,
             pMasqueradingVector [0],
             pJson [pMasqueradingVector [0]],
             err,
             true
           ))
        {
          return false;
        }
      }
    }
    if(! pMasqueradingVector [1].empty())
    {
      if(pJson.isMember(pMasqueradingVector [1]))
      {
        if(! validJsonOfField(
             1,
             pMasqueradingVector [1],
             pJson [pMasqueradingVector [1]],
             err,
             true
           ))
        {
          return false;
        }
      }
    }
    if(! pMasqueradingVector [2].empty())
    {
      if(pJson.isMember(pMasqueradingVector [2]))
      {
        if(! validJsonOfField(
             2,
             pMasqueradingVector [2],
             pJson [pMasqueradingVector [2]],
             err,
             true
           ))
        {
          return false;
        }
      }
    }
  }
  catch(const Json::LogicError& e)
  {
    err = e.what();
    return false;
  }
  return true;
}

bool
Provider::validateJsonForUpdate(const Json::Value& pJson, std::string& err)
{
  if(pJson.isMember("id"))
  {
    if(! validJsonOfField(0, "id", pJson ["id"], err, false))
    {
      return false;
    }
  }
  else
  {
    err = "The value of primary key must be set in the json object for update";
    return false;
  }
  if(pJson.isMember("name"))
  {
    if(! validJsonOfField(1, "name", pJson ["name"], err, false))
    {
      return false;
    }
  }
  if(pJson.isMember("wsep"))
  {
    if(! validJsonOfField(2, "wsep", pJson ["wsep"], err, false))
    {
      return false;
    }
  }
  return true;
}

bool
Provider::validateMasqueradedJsonForUpdate(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector,
  std::string& err
)
{
  if(pMasqueradingVector.size() != 3)
  {
    err = "Bad masquerading vector";
    return false;
  }
  try
  {
    if(! pMasqueradingVector [0].empty() && pJson.isMember(pMasqueradingVector [0]))
    {
      if(! validJsonOfField(
           0,
           pMasqueradingVector [0],
           pJson [pMasqueradingVector [0]],
           err,
           false
         ))
      {
        return false;
      }
    }
    else
    {
      err =
        "The value of primary key must be set in the json object for update";
      return false;
    }
    if(! pMasqueradingVector [1].empty() && pJson.isMember(pMasqueradingVector [1]))
    {
      if(! validJsonOfField(
           1,
           pMasqueradingVector [1],
           pJson [pMasqueradingVector [1]],
           err,
           false
         ))
      {
        return false;
      }
    }
    if(! pMasqueradingVector [2].empty() && pJson.isMember(pMasqueradingVector [2]))
    {
      if(! validJsonOfField(
           2,
           pMasqueradingVector [2],
           pJson [pMasqueradingVector [2]],
           err,
           false
         ))
      {
        return false;
      }
    }
  }
  catch(const Json::LogicError& e)
  {
    err = e.what();
    return false;
  }
  return true;
}

bool
Provider::validJsonOfField(
  size_t index,
  const std::string& fieldName,
  const Json::Value& pJson,
  std::string& err,
  bool isForCreation
)
{
  switch(index)
  {
    case 0:
      if(pJson.isNull())
      {
        err = "The " + fieldName + " column cannot be null";
        return false;
      }
      if(isForCreation)
      {
        err = "The automatic primary key cannot be set";
        return false;
      }
      if(! pJson.isInt64())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      break;
    case 1:
      if(pJson.isNull())
      {
        return true;
      }
      if(! pJson.isString())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      // asString().length() creates a string object, is there any better way to
      // validate the length?
      if(pJson.isString() && pJson.asString().length() > 50)
      {
        err = "String length exceeds limit for the " + fieldName +
              " field (the maximum value is 50)";
        return false;
      }

      break;
    case 2:
      if(pJson.isNull())
      {
        return true;
      }
      if(! pJson.isString())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      // asString().length() creates a string object, is there any better way to
      // validate the length?
      if(pJson.isString() && pJson.asString().length() > 200)
      {
        err = "String length exceeds limit for the " + fieldName +
              " field (the maximum value is 200)";
        return false;
      }

      break;
    default:
      err = "Internal error in the server";
      return false;
  }
  return true;
}

// NOLINTEND
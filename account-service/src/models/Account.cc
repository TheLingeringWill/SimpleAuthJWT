/**
 *
 *  Account.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */
// NOLINTBEGIN
#include "Account.h"

#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::famy_account;

const std::string Account::Cols::_id = "id";
const std::string Account::Cols::_uuid = "uuid";
const std::string Account::Cols::_role_id = "role_id";
const std::string Account::Cols::_first_name = "first_name";
const std::string Account::Cols::_last_name = "last_name";
const std::string Account::Cols::_email = "email";
const std::string Account::Cols::_password = "password";
const std::string Account::Cols::_is_verified = "is_verified";
const std::string Account::Cols::_address = "address";
const std::string Account::primaryKeyName = "id";
const bool Account::hasPrimaryKey = true;
const std::string Account::tableName = "account";

const std::vector<typename Account::MetaData> Account::metaData_ = {
  {         "id",     "int64_t",            "bigint",  8, 0, 1, 1},
  {       "uuid", "std::string",              "uuid",  0, 0, 0, 1},
  {    "role_id",     "int64_t",            "bigint",  8, 0, 0, 0},
  { "first_name", "std::string", "character varying", 50, 0, 0, 1},
  {  "last_name", "std::string", "character varying", 50, 0, 0, 1},
  {      "email", "std::string", "character varying", 50, 0, 0, 1},
  {   "password", "std::string", "character varying", 32, 0, 0, 1},
  {"is_verified",        "bool",           "boolean",  1, 0, 0, 1},
  {    "address", "std::string", "character varying", 36, 0, 0, 0}
};

const std::string&
Account::getColumnName(size_t index) noexcept(false)
{
  assert(index < metaData_.size());
  return metaData_ [index].colName_;
}

Account::Account(const Row& r, const ssize_t indexOffset) noexcept
{
  if(indexOffset < 0)
  {
    if(! r ["id"].isNull())
    {
      id_ = std::make_shared<int64_t>(r ["id"].as<int64_t>());
    }
    if(! r ["uuid"].isNull())
    {
      uuid_ = std::make_shared<std::string>(r ["uuid"].as<std::string>());
    }
    if(! r ["role_id"].isNull())
    {
      roleId_ = std::make_shared<int64_t>(r ["role_id"].as<int64_t>());
    }
    if(! r ["first_name"].isNull())
    {
      firstName_ =
        std::make_shared<std::string>(r ["first_name"].as<std::string>());
    }
    if(! r ["last_name"].isNull())
    {
      lastName_ =
        std::make_shared<std::string>(r ["last_name"].as<std::string>());
    }
    if(! r ["email"].isNull())
    {
      email_ = std::make_shared<std::string>(r ["email"].as<std::string>());
    }
    if(! r ["password"].isNull())
    {
      password_ =
        std::make_shared<std::string>(r ["password"].as<std::string>());
    }
    if(! r ["is_verified"].isNull())
    {
      isVerified_ = std::make_shared<bool>(r ["is_verified"].as<bool>());
    }
    if(! r ["address"].isNull())
    {
      address_ = std::make_shared<std::string>(r ["address"].as<std::string>());
    }
  }
  else
  {
    size_t offset = (size_t)indexOffset;
    if(offset + 9 > r.size())
    {
      LOG_FATAL << "Invalid SQL result for this model";
      return;
    }
    size_t index;
    index = offset + 0;
    if(! r [index].isNull())
    {
      id_ = std::make_shared<int64_t>(r [index].as<int64_t>());
    }
    index = offset + 1;
    if(! r [index].isNull())
    {
      uuid_ = std::make_shared<std::string>(r [index].as<std::string>());
    }
    index = offset + 2;
    if(! r [index].isNull())
    {
      roleId_ = std::make_shared<int64_t>(r [index].as<int64_t>());
    }
    index = offset + 3;
    if(! r [index].isNull())
    {
      firstName_ = std::make_shared<std::string>(r [index].as<std::string>());
    }
    index = offset + 4;
    if(! r [index].isNull())
    {
      lastName_ = std::make_shared<std::string>(r [index].as<std::string>());
    }
    index = offset + 5;
    if(! r [index].isNull())
    {
      email_ = std::make_shared<std::string>(r [index].as<std::string>());
    }
    index = offset + 6;
    if(! r [index].isNull())
    {
      password_ = std::make_shared<std::string>(r [index].as<std::string>());
    }
    index = offset + 7;
    if(! r [index].isNull())
    {
      isVerified_ = std::make_shared<bool>(r [index].as<bool>());
    }
    index = offset + 8;
    if(! r [index].isNull())
    {
      address_ = std::make_shared<std::string>(r [index].as<std::string>());
    }
  }
}

Account::Account(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector
) noexcept(false)
{
  if(pMasqueradingVector.size() != 9)
  {
    LOG_ERROR << "Bad masquerading vector";
    return;
  }
  if(! pMasqueradingVector [0].empty() && pJson.isMember(pMasqueradingVector [0]))
  {
    dirtyFlag_ [0] = true;
    if(! pJson [pMasqueradingVector [0]].isNull())
    {
      id_ = std::make_shared<int64_t>(
        (int64_t)pJson [pMasqueradingVector [0]].asInt64()
      );
    }
  }
  if(! pMasqueradingVector [1].empty() && pJson.isMember(pMasqueradingVector [1]))
  {
    dirtyFlag_ [1] = true;
    if(! pJson [pMasqueradingVector [1]].isNull())
    {
      uuid_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [1]].asString()
        );
    }
  }
  if(! pMasqueradingVector [2].empty() && pJson.isMember(pMasqueradingVector [2]))
  {
    dirtyFlag_ [2] = true;
    if(! pJson [pMasqueradingVector [2]].isNull())
    {
      roleId_ = std::make_shared<int64_t>(
        (int64_t)pJson [pMasqueradingVector [2]].asInt64()
      );
    }
  }
  if(! pMasqueradingVector [3].empty() && pJson.isMember(pMasqueradingVector [3]))
  {
    dirtyFlag_ [3] = true;
    if(! pJson [pMasqueradingVector [3]].isNull())
    {
      firstName_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [3]].asString()
        );
    }
  }
  if(! pMasqueradingVector [4].empty() && pJson.isMember(pMasqueradingVector [4]))
  {
    dirtyFlag_ [4] = true;
    if(! pJson [pMasqueradingVector [4]].isNull())
    {
      lastName_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [4]].asString()
        );
    }
  }
  if(! pMasqueradingVector [5].empty() && pJson.isMember(pMasqueradingVector [5]))
  {
    dirtyFlag_ [5] = true;
    if(! pJson [pMasqueradingVector [5]].isNull())
    {
      email_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [5]].asString()
        );
    }
  }
  if(! pMasqueradingVector [6].empty() && pJson.isMember(pMasqueradingVector [6]))
  {
    dirtyFlag_ [6] = true;
    if(! pJson [pMasqueradingVector [6]].isNull())
    {
      password_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [6]].asString()
        );
    }
  }
  if(! pMasqueradingVector [7].empty() && pJson.isMember(pMasqueradingVector [7]))
  {
    dirtyFlag_ [7] = true;
    if(! pJson [pMasqueradingVector [7]].isNull())
    {
      isVerified_ =
        std::make_shared<bool>(pJson [pMasqueradingVector [7]].asBool());
    }
  }
  if(! pMasqueradingVector [8].empty() && pJson.isMember(pMasqueradingVector [8]))
  {
    dirtyFlag_ [8] = true;
    if(! pJson [pMasqueradingVector [8]].isNull())
    {
      address_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [8]].asString()
        );
    }
  }
}

Account::Account(const Json::Value& pJson) noexcept(false)
{
  if(pJson.isMember("id"))
  {
    dirtyFlag_ [0] = true;
    if(! pJson ["id"].isNull())
    {
      id_ = std::make_shared<int64_t>((int64_t)pJson ["id"].asInt64());
    }
  }
  if(pJson.isMember("uuid"))
  {
    dirtyFlag_ [1] = true;
    if(! pJson ["uuid"].isNull())
    {
      uuid_ = std::make_shared<std::string>(pJson ["uuid"].asString());
    }
  }
  if(pJson.isMember("role_id"))
  {
    dirtyFlag_ [2] = true;
    if(! pJson ["role_id"].isNull())
    {
      roleId_ = std::make_shared<int64_t>((int64_t)pJson ["role_id"].asInt64());
    }
  }
  if(pJson.isMember("first_name"))
  {
    dirtyFlag_ [3] = true;
    if(! pJson ["first_name"].isNull())
    {
      firstName_ =
        std::make_shared<std::string>(pJson ["first_name"].asString());
    }
  }
  if(pJson.isMember("last_name"))
  {
    dirtyFlag_ [4] = true;
    if(! pJson ["last_name"].isNull())
    {
      lastName_ = std::make_shared<std::string>(pJson ["last_name"].asString());
    }
  }
  if(pJson.isMember("email"))
  {
    dirtyFlag_ [5] = true;
    if(! pJson ["email"].isNull())
    {
      email_ = std::make_shared<std::string>(pJson ["email"].asString());
    }
  }
  if(pJson.isMember("password"))
  {
    dirtyFlag_ [6] = true;
    if(! pJson ["password"].isNull())
    {
      password_ = std::make_shared<std::string>(pJson ["password"].asString());
    }
  }
  if(pJson.isMember("is_verified"))
  {
    dirtyFlag_ [7] = true;
    if(! pJson ["is_verified"].isNull())
    {
      isVerified_ = std::make_shared<bool>(pJson ["is_verified"].asBool());
    }
  }
  if(pJson.isMember("address"))
  {
    dirtyFlag_ [8] = true;
    if(! pJson ["address"].isNull())
    {
      address_ = std::make_shared<std::string>(pJson ["address"].asString());
    }
  }
}

void
Account::updateByMasqueradedJson(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector
) noexcept(false)
{
  if(pMasqueradingVector.size() != 9)
  {
    LOG_ERROR << "Bad masquerading vector";
    return;
  }
  if(! pMasqueradingVector [0].empty() && pJson.isMember(pMasqueradingVector [0]))
  {
    if(! pJson [pMasqueradingVector [0]].isNull())
    {
      id_ = std::make_shared<int64_t>(
        (int64_t)pJson [pMasqueradingVector [0]].asInt64()
      );
    }
  }
  if(! pMasqueradingVector [1].empty() && pJson.isMember(pMasqueradingVector [1]))
  {
    dirtyFlag_ [1] = true;
    if(! pJson [pMasqueradingVector [1]].isNull())
    {
      uuid_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [1]].asString()
        );
    }
  }
  if(! pMasqueradingVector [2].empty() && pJson.isMember(pMasqueradingVector [2]))
  {
    dirtyFlag_ [2] = true;
    if(! pJson [pMasqueradingVector [2]].isNull())
    {
      roleId_ = std::make_shared<int64_t>(
        (int64_t)pJson [pMasqueradingVector [2]].asInt64()
      );
    }
  }
  if(! pMasqueradingVector [3].empty() && pJson.isMember(pMasqueradingVector [3]))
  {
    dirtyFlag_ [3] = true;
    if(! pJson [pMasqueradingVector [3]].isNull())
    {
      firstName_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [3]].asString()
        );
    }
  }
  if(! pMasqueradingVector [4].empty() && pJson.isMember(pMasqueradingVector [4]))
  {
    dirtyFlag_ [4] = true;
    if(! pJson [pMasqueradingVector [4]].isNull())
    {
      lastName_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [4]].asString()
        );
    }
  }
  if(! pMasqueradingVector [5].empty() && pJson.isMember(pMasqueradingVector [5]))
  {
    dirtyFlag_ [5] = true;
    if(! pJson [pMasqueradingVector [5]].isNull())
    {
      email_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [5]].asString()
        );
    }
  }
  if(! pMasqueradingVector [6].empty() && pJson.isMember(pMasqueradingVector [6]))
  {
    dirtyFlag_ [6] = true;
    if(! pJson [pMasqueradingVector [6]].isNull())
    {
      password_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [6]].asString()
        );
    }
  }
  if(! pMasqueradingVector [7].empty() && pJson.isMember(pMasqueradingVector [7]))
  {
    dirtyFlag_ [7] = true;
    if(! pJson [pMasqueradingVector [7]].isNull())
    {
      isVerified_ =
        std::make_shared<bool>(pJson [pMasqueradingVector [7]].asBool());
    }
  }
  if(! pMasqueradingVector [8].empty() && pJson.isMember(pMasqueradingVector [8]))
  {
    dirtyFlag_ [8] = true;
    if(! pJson [pMasqueradingVector [8]].isNull())
    {
      address_ =
        std::make_shared<std::string>(pJson [pMasqueradingVector [8]].asString()
        );
    }
  }
}

void
Account::updateByJson(const Json::Value& pJson) noexcept(false)
{
  if(pJson.isMember("id"))
  {
    if(! pJson ["id"].isNull())
    {
      id_ = std::make_shared<int64_t>((int64_t)pJson ["id"].asInt64());
    }
  }
  if(pJson.isMember("uuid"))
  {
    dirtyFlag_ [1] = true;
    if(! pJson ["uuid"].isNull())
    {
      uuid_ = std::make_shared<std::string>(pJson ["uuid"].asString());
    }
  }
  if(pJson.isMember("role_id"))
  {
    dirtyFlag_ [2] = true;
    if(! pJson ["role_id"].isNull())
    {
      roleId_ = std::make_shared<int64_t>((int64_t)pJson ["role_id"].asInt64());
    }
  }
  if(pJson.isMember("first_name"))
  {
    dirtyFlag_ [3] = true;
    if(! pJson ["first_name"].isNull())
    {
      firstName_ =
        std::make_shared<std::string>(pJson ["first_name"].asString());
    }
  }
  if(pJson.isMember("last_name"))
  {
    dirtyFlag_ [4] = true;
    if(! pJson ["last_name"].isNull())
    {
      lastName_ = std::make_shared<std::string>(pJson ["last_name"].asString());
    }
  }
  if(pJson.isMember("email"))
  {
    dirtyFlag_ [5] = true;
    if(! pJson ["email"].isNull())
    {
      email_ = std::make_shared<std::string>(pJson ["email"].asString());
    }
  }
  if(pJson.isMember("password"))
  {
    dirtyFlag_ [6] = true;
    if(! pJson ["password"].isNull())
    {
      password_ = std::make_shared<std::string>(pJson ["password"].asString());
    }
  }
  if(pJson.isMember("is_verified"))
  {
    dirtyFlag_ [7] = true;
    if(! pJson ["is_verified"].isNull())
    {
      isVerified_ = std::make_shared<bool>(pJson ["is_verified"].asBool());
    }
  }
  if(pJson.isMember("address"))
  {
    dirtyFlag_ [8] = true;
    if(! pJson ["address"].isNull())
    {
      address_ = std::make_shared<std::string>(pJson ["address"].asString());
    }
  }
}

const int64_t&
Account::getValueOfId() const noexcept
{
  const static int64_t defaultValue = int64_t();
  if(id_)
  {
    return *id_;
  }
  return defaultValue;
}

const std::shared_ptr<int64_t>&
Account::getId() const noexcept
{
  return id_;
}

void
Account::setId(const int64_t& pId) noexcept
{
  id_ = std::make_shared<int64_t>(pId);
  dirtyFlag_ [0] = true;
}

const typename Account::PrimaryKeyType&
Account::getPrimaryKey() const
{
  assert(id_);
  return *id_;
}

const std::string&
Account::getValueOfUuid() const noexcept
{
  const static std::string defaultValue = std::string();
  if(uuid_)
  {
    return *uuid_;
  }
  return defaultValue;
}

const std::shared_ptr<std::string>&
Account::getUuid() const noexcept
{
  return uuid_;
}

void
Account::setUuid(const std::string& pUuid) noexcept
{
  uuid_ = std::make_shared<std::string>(pUuid);
  dirtyFlag_ [1] = true;
}

void
Account::setUuid(std::string&& pUuid) noexcept
{
  uuid_ = std::make_shared<std::string>(std::move(pUuid));
  dirtyFlag_ [1] = true;
}

const int64_t&
Account::getValueOfRoleId() const noexcept
{
  const static int64_t defaultValue = int64_t();
  if(roleId_)
  {
    return *roleId_;
  }
  return defaultValue;
}

const std::shared_ptr<int64_t>&
Account::getRoleId() const noexcept
{
  return roleId_;
}

void
Account::setRoleId(const int64_t& pRoleId) noexcept
{
  roleId_ = std::make_shared<int64_t>(pRoleId);
  dirtyFlag_ [2] = true;
}

void
Account::setRoleIdToNull() noexcept
{
  roleId_.reset();
  dirtyFlag_ [2] = true;
}

const std::string&
Account::getValueOfFirstName() const noexcept
{
  const static std::string defaultValue = std::string();
  if(firstName_)
  {
    return *firstName_;
  }
  return defaultValue;
}

const std::shared_ptr<std::string>&
Account::getFirstName() const noexcept
{
  return firstName_;
}

void
Account::setFirstName(const std::string& pFirstName) noexcept
{
  firstName_ = std::make_shared<std::string>(pFirstName);
  dirtyFlag_ [3] = true;
}

void
Account::setFirstName(std::string&& pFirstName) noexcept
{
  firstName_ = std::make_shared<std::string>(std::move(pFirstName));
  dirtyFlag_ [3] = true;
}

const std::string&
Account::getValueOfLastName() const noexcept
{
  const static std::string defaultValue = std::string();
  if(lastName_)
  {
    return *lastName_;
  }
  return defaultValue;
}

const std::shared_ptr<std::string>&
Account::getLastName() const noexcept
{
  return lastName_;
}

void
Account::setLastName(const std::string& pLastName) noexcept
{
  lastName_ = std::make_shared<std::string>(pLastName);
  dirtyFlag_ [4] = true;
}

void
Account::setLastName(std::string&& pLastName) noexcept
{
  lastName_ = std::make_shared<std::string>(std::move(pLastName));
  dirtyFlag_ [4] = true;
}

const std::string&
Account::getValueOfEmail() const noexcept
{
  const static std::string defaultValue = std::string();
  if(email_)
  {
    return *email_;
  }
  return defaultValue;
}

const std::shared_ptr<std::string>&
Account::getEmail() const noexcept
{
  return email_;
}

void
Account::setEmail(const std::string& pEmail) noexcept
{
  email_ = std::make_shared<std::string>(pEmail);
  dirtyFlag_ [5] = true;
}

void
Account::setEmail(std::string&& pEmail) noexcept
{
  email_ = std::make_shared<std::string>(std::move(pEmail));
  dirtyFlag_ [5] = true;
}

const std::string&
Account::getValueOfPassword() const noexcept
{
  const static std::string defaultValue = std::string();
  if(password_)
  {
    return *password_;
  }
  return defaultValue;
}

const std::shared_ptr<std::string>&
Account::getPassword() const noexcept
{
  return password_;
}

void
Account::setPassword(const std::string& pPassword) noexcept
{
  password_ = std::make_shared<std::string>(pPassword);
  dirtyFlag_ [6] = true;
}

void
Account::setPassword(std::string&& pPassword) noexcept
{
  password_ = std::make_shared<std::string>(std::move(pPassword));
  dirtyFlag_ [6] = true;
}

const bool&
Account::getValueOfIsVerified() const noexcept
{
  const static bool defaultValue = bool();
  if(isVerified_)
  {
    return *isVerified_;
  }
  return defaultValue;
}

const std::shared_ptr<bool>&
Account::getIsVerified() const noexcept
{
  return isVerified_;
}

void
Account::setIsVerified(const bool& pIsVerified) noexcept
{
  isVerified_ = std::make_shared<bool>(pIsVerified);
  dirtyFlag_ [7] = true;
}

const std::string&
Account::getValueOfAddress() const noexcept
{
  const static std::string defaultValue = std::string();
  if(address_)
  {
    return *address_;
  }
  return defaultValue;
}

const std::shared_ptr<std::string>&
Account::getAddress() const noexcept
{
  return address_;
}

void
Account::setAddress(const std::string& pAddress) noexcept
{
  address_ = std::make_shared<std::string>(pAddress);
  dirtyFlag_ [8] = true;
}

void
Account::setAddress(std::string&& pAddress) noexcept
{
  address_ = std::make_shared<std::string>(std::move(pAddress));
  dirtyFlag_ [8] = true;
}

void
Account::setAddressToNull() noexcept
{
  address_.reset();
  dirtyFlag_ [8] = true;
}

void
Account::updateId(const uint64_t id)
{
}

const std::vector<std::string>&
Account::insertColumns() noexcept
{
  static const std::vector<std::string> inCols = {
    "id",
    "uuid",
    "role_id",
    "first_name",
    "last_name",
    "email",
    "password",
    "is_verified",
    "address"
  };
  return inCols;
}

void
Account::outputArgs(drogon::orm::internal::SqlBinder& binder) const
{
  if(dirtyFlag_ [0])
  {
    if(getId())
    {
      binder << getValueOfId();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [1])
  {
    if(getUuid())
    {
      binder << getValueOfUuid();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [2])
  {
    if(getRoleId())
    {
      binder << getValueOfRoleId();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [3])
  {
    if(getFirstName())
    {
      binder << getValueOfFirstName();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [4])
  {
    if(getLastName())
    {
      binder << getValueOfLastName();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [5])
  {
    if(getEmail())
    {
      binder << getValueOfEmail();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [6])
  {
    if(getPassword())
    {
      binder << getValueOfPassword();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [7])
  {
    if(getIsVerified())
    {
      binder << getValueOfIsVerified();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [8])
  {
    if(getAddress())
    {
      binder << getValueOfAddress();
    }
    else
    {
      binder << nullptr;
    }
  }
}

const std::vector<std::string>
Account::updateColumns() const
{
  std::vector<std::string> ret;
  if(dirtyFlag_ [0])
  {
    ret.push_back(getColumnName(0));
  }
  if(dirtyFlag_ [1])
  {
    ret.push_back(getColumnName(1));
  }
  if(dirtyFlag_ [2])
  {
    ret.push_back(getColumnName(2));
  }
  if(dirtyFlag_ [3])
  {
    ret.push_back(getColumnName(3));
  }
  if(dirtyFlag_ [4])
  {
    ret.push_back(getColumnName(4));
  }
  if(dirtyFlag_ [5])
  {
    ret.push_back(getColumnName(5));
  }
  if(dirtyFlag_ [6])
  {
    ret.push_back(getColumnName(6));
  }
  if(dirtyFlag_ [7])
  {
    ret.push_back(getColumnName(7));
  }
  if(dirtyFlag_ [8])
  {
    ret.push_back(getColumnName(8));
  }
  return ret;
}

void
Account::updateArgs(drogon::orm::internal::SqlBinder& binder) const
{
  if(dirtyFlag_ [0])
  {
    if(getId())
    {
      binder << getValueOfId();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [1])
  {
    if(getUuid())
    {
      binder << getValueOfUuid();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [2])
  {
    if(getRoleId())
    {
      binder << getValueOfRoleId();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [3])
  {
    if(getFirstName())
    {
      binder << getValueOfFirstName();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [4])
  {
    if(getLastName())
    {
      binder << getValueOfLastName();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [5])
  {
    if(getEmail())
    {
      binder << getValueOfEmail();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [6])
  {
    if(getPassword())
    {
      binder << getValueOfPassword();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [7])
  {
    if(getIsVerified())
    {
      binder << getValueOfIsVerified();
    }
    else
    {
      binder << nullptr;
    }
  }
  if(dirtyFlag_ [8])
  {
    if(getAddress())
    {
      binder << getValueOfAddress();
    }
    else
    {
      binder << nullptr;
    }
  }
}

Json::Value
Account::toJson() const
{
  Json::Value ret;
  if(getId())
  {
    ret ["id"] = (Json::Int64)getValueOfId();
  }
  else
  {
    ret ["id"] = Json::Value();
  }
  if(getUuid())
  {
    ret ["uuid"] = getValueOfUuid();
  }
  else
  {
    ret ["uuid"] = Json::Value();
  }
  if(getRoleId())
  {
    ret ["role_id"] = (Json::Int64)getValueOfRoleId();
  }
  else
  {
    ret ["role_id"] = Json::Value();
  }
  if(getFirstName())
  {
    ret ["first_name"] = getValueOfFirstName();
  }
  else
  {
    ret ["first_name"] = Json::Value();
  }
  if(getLastName())
  {
    ret ["last_name"] = getValueOfLastName();
  }
  else
  {
    ret ["last_name"] = Json::Value();
  }
  if(getEmail())
  {
    ret ["email"] = getValueOfEmail();
  }
  else
  {
    ret ["email"] = Json::Value();
  }
  if(getPassword())
  {
    ret ["password"] = getValueOfPassword();
  }
  else
  {
    ret ["password"] = Json::Value();
  }
  if(getIsVerified())
  {
    ret ["is_verified"] = getValueOfIsVerified();
  }
  else
  {
    ret ["is_verified"] = Json::Value();
  }
  if(getAddress())
  {
    ret ["address"] = getValueOfAddress();
  }
  else
  {
    ret ["address"] = Json::Value();
  }
  return ret;
}

Json::Value
Account::toMasqueradedJson(const std::vector<std::string>& pMasqueradingVector
) const
{
  Json::Value ret;
  if(pMasqueradingVector.size() == 9)
  {
    if(! pMasqueradingVector [0].empty())
    {
      if(getId())
      {
        ret [pMasqueradingVector [0]] = (Json::Int64)getValueOfId();
      }
      else
      {
        ret [pMasqueradingVector [0]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [1].empty())
    {
      if(getUuid())
      {
        ret [pMasqueradingVector [1]] = getValueOfUuid();
      }
      else
      {
        ret [pMasqueradingVector [1]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [2].empty())
    {
      if(getRoleId())
      {
        ret [pMasqueradingVector [2]] = (Json::Int64)getValueOfRoleId();
      }
      else
      {
        ret [pMasqueradingVector [2]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [3].empty())
    {
      if(getFirstName())
      {
        ret [pMasqueradingVector [3]] = getValueOfFirstName();
      }
      else
      {
        ret [pMasqueradingVector [3]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [4].empty())
    {
      if(getLastName())
      {
        ret [pMasqueradingVector [4]] = getValueOfLastName();
      }
      else
      {
        ret [pMasqueradingVector [4]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [5].empty())
    {
      if(getEmail())
      {
        ret [pMasqueradingVector [5]] = getValueOfEmail();
      }
      else
      {
        ret [pMasqueradingVector [5]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [6].empty())
    {
      if(getPassword())
      {
        ret [pMasqueradingVector [6]] = getValueOfPassword();
      }
      else
      {
        ret [pMasqueradingVector [6]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [7].empty())
    {
      if(getIsVerified())
      {
        ret [pMasqueradingVector [7]] = getValueOfIsVerified();
      }
      else
      {
        ret [pMasqueradingVector [7]] = Json::Value();
      }
    }
    if(! pMasqueradingVector [8].empty())
    {
      if(getAddress())
      {
        ret [pMasqueradingVector [8]] = getValueOfAddress();
      }
      else
      {
        ret [pMasqueradingVector [8]] = Json::Value();
      }
    }
    return ret;
  }
  LOG_ERROR << "Masquerade failed";
  if(getId())
  {
    ret ["id"] = (Json::Int64)getValueOfId();
  }
  else
  {
    ret ["id"] = Json::Value();
  }
  if(getUuid())
  {
    ret ["uuid"] = getValueOfUuid();
  }
  else
  {
    ret ["uuid"] = Json::Value();
  }
  if(getRoleId())
  {
    ret ["role_id"] = (Json::Int64)getValueOfRoleId();
  }
  else
  {
    ret ["role_id"] = Json::Value();
  }
  if(getFirstName())
  {
    ret ["first_name"] = getValueOfFirstName();
  }
  else
  {
    ret ["first_name"] = Json::Value();
  }
  if(getLastName())
  {
    ret ["last_name"] = getValueOfLastName();
  }
  else
  {
    ret ["last_name"] = Json::Value();
  }
  if(getEmail())
  {
    ret ["email"] = getValueOfEmail();
  }
  else
  {
    ret ["email"] = Json::Value();
  }
  if(getPassword())
  {
    ret ["password"] = getValueOfPassword();
  }
  else
  {
    ret ["password"] = Json::Value();
  }
  if(getIsVerified())
  {
    ret ["is_verified"] = getValueOfIsVerified();
  }
  else
  {
    ret ["is_verified"] = Json::Value();
  }
  if(getAddress())
  {
    ret ["address"] = getValueOfAddress();
  }
  else
  {
    ret ["address"] = Json::Value();
  }
  return ret;
}

bool
Account::validateJsonForCreation(const Json::Value& pJson, std::string& err)
{
  if(pJson.isMember("id"))
  {
    if(! validJsonOfField(0, "id", pJson ["id"], err, true))
    {
      return false;
    }
  }
  else
  {
    err = "The id column cannot be null";
    return false;
  }
  if(pJson.isMember("uuid"))
  {
    if(! validJsonOfField(1, "uuid", pJson ["uuid"], err, true))
    {
      return false;
    }
  }
  if(pJson.isMember("role_id"))
  {
    if(! validJsonOfField(2, "role_id", pJson ["role_id"], err, true))
    {
      return false;
    }
  }
  if(pJson.isMember("first_name"))
  {
    if(! validJsonOfField(3, "first_name", pJson ["first_name"], err, true))
    {
      return false;
    }
  }
  else
  {
    err = "The first_name column cannot be null";
    return false;
  }
  if(pJson.isMember("last_name"))
  {
    if(! validJsonOfField(4, "last_name", pJson ["last_name"], err, true))
    {
      return false;
    }
  }
  else
  {
    err = "The last_name column cannot be null";
    return false;
  }
  if(pJson.isMember("email"))
  {
    if(! validJsonOfField(5, "email", pJson ["email"], err, true))
    {
      return false;
    }
  }
  else
  {
    err = "The email column cannot be null";
    return false;
  }
  if(pJson.isMember("password"))
  {
    if(! validJsonOfField(6, "password", pJson ["password"], err, true))
    {
      return false;
    }
  }
  else
  {
    err = "The password column cannot be null";
    return false;
  }
  if(pJson.isMember("is_verified"))
  {
    if(! validJsonOfField(7, "is_verified", pJson ["is_verified"], err, true))
    {
      return false;
    }
  }
  if(pJson.isMember("address"))
  {
    if(! validJsonOfField(8, "address", pJson ["address"], err, true))
    {
      return false;
    }
  }
  return true;
}

bool
Account::validateMasqueradedJsonForCreation(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector,
  std::string& err
)
{
  if(pMasqueradingVector.size() != 9)
  {
    err = "Bad masquerading vector";
    return false;
  }
  try
  {
    if(! pMasqueradingVector [0].empty())
    {
      if(pJson.isMember(pMasqueradingVector [0]))
      {
        if(! validJsonOfField(
             0,
             pMasqueradingVector [0],
             pJson [pMasqueradingVector [0]],
             err,
             true
           ))
        {
          return false;
        }
      }
      else
      {
        err = "The " + pMasqueradingVector [0] + " column cannot be null";
        return false;
      }
    }
    if(! pMasqueradingVector [1].empty())
    {
      if(pJson.isMember(pMasqueradingVector [1]))
      {
        if(! validJsonOfField(
             1,
             pMasqueradingVector [1],
             pJson [pMasqueradingVector [1]],
             err,
             true
           ))
        {
          return false;
        }
      }
    }
    if(! pMasqueradingVector [2].empty())
    {
      if(pJson.isMember(pMasqueradingVector [2]))
      {
        if(! validJsonOfField(
             2,
             pMasqueradingVector [2],
             pJson [pMasqueradingVector [2]],
             err,
             true
           ))
        {
          return false;
        }
      }
    }
    if(! pMasqueradingVector [3].empty())
    {
      if(pJson.isMember(pMasqueradingVector [3]))
      {
        if(! validJsonOfField(
             3,
             pMasqueradingVector [3],
             pJson [pMasqueradingVector [3]],
             err,
             true
           ))
        {
          return false;
        }
      }
      else
      {
        err = "The " + pMasqueradingVector [3] + " column cannot be null";
        return false;
      }
    }
    if(! pMasqueradingVector [4].empty())
    {
      if(pJson.isMember(pMasqueradingVector [4]))
      {
        if(! validJsonOfField(
             4,
             pMasqueradingVector [4],
             pJson [pMasqueradingVector [4]],
             err,
             true
           ))
        {
          return false;
        }
      }
      else
      {
        err = "The " + pMasqueradingVector [4] + " column cannot be null";
        return false;
      }
    }
    if(! pMasqueradingVector [5].empty())
    {
      if(pJson.isMember(pMasqueradingVector [5]))
      {
        if(! validJsonOfField(
             5,
             pMasqueradingVector [5],
             pJson [pMasqueradingVector [5]],
             err,
             true
           ))
        {
          return false;
        }
      }
      else
      {
        err = "The " + pMasqueradingVector [5] + " column cannot be null";
        return false;
      }
    }
    if(! pMasqueradingVector [6].empty())
    {
      if(pJson.isMember(pMasqueradingVector [6]))
      {
        if(! validJsonOfField(
             6,
             pMasqueradingVector [6],
             pJson [pMasqueradingVector [6]],
             err,
             true
           ))
        {
          return false;
        }
      }
      else
      {
        err = "The " + pMasqueradingVector [6] + " column cannot be null";
        return false;
      }
    }
    if(! pMasqueradingVector [7].empty())
    {
      if(pJson.isMember(pMasqueradingVector [7]))
      {
        if(! validJsonOfField(
             7,
             pMasqueradingVector [7],
             pJson [pMasqueradingVector [7]],
             err,
             true
           ))
        {
          return false;
        }
      }
    }
    if(! pMasqueradingVector [8].empty())
    {
      if(pJson.isMember(pMasqueradingVector [8]))
      {
        if(! validJsonOfField(
             8,
             pMasqueradingVector [8],
             pJson [pMasqueradingVector [8]],
             err,
             true
           ))
        {
          return false;
        }
      }
    }
  }
  catch(const Json::LogicError& e)
  {
    err = e.what();
    return false;
  }
  return true;
}

bool
Account::validateJsonForUpdate(const Json::Value& pJson, std::string& err)
{
  if(pJson.isMember("id"))
  {
    if(! validJsonOfField(0, "id", pJson ["id"], err, false))
    {
      return false;
    }
  }
  else
  {
    err = "The value of primary key must be set in the json object for update";
    return false;
  }
  if(pJson.isMember("uuid"))
  {
    if(! validJsonOfField(1, "uuid", pJson ["uuid"], err, false))
    {
      return false;
    }
  }
  if(pJson.isMember("role_id"))
  {
    if(! validJsonOfField(2, "role_id", pJson ["role_id"], err, false))
    {
      return false;
    }
  }
  if(pJson.isMember("first_name"))
  {
    if(! validJsonOfField(3, "first_name", pJson ["first_name"], err, false))
    {
      return false;
    }
  }
  if(pJson.isMember("last_name"))
  {
    if(! validJsonOfField(4, "last_name", pJson ["last_name"], err, false))
    {
      return false;
    }
  }
  if(pJson.isMember("email"))
  {
    if(! validJsonOfField(5, "email", pJson ["email"], err, false))
    {
      return false;
    }
  }
  if(pJson.isMember("password"))
  {
    if(! validJsonOfField(6, "password", pJson ["password"], err, false))
    {
      return false;
    }
  }
  if(pJson.isMember("is_verified"))
  {
    if(! validJsonOfField(7, "is_verified", pJson ["is_verified"], err, false))
    {
      return false;
    }
  }
  if(pJson.isMember("address"))
  {
    if(! validJsonOfField(8, "address", pJson ["address"], err, false))
    {
      return false;
    }
  }
  return true;
}

bool
Account::validateMasqueradedJsonForUpdate(
  const Json::Value& pJson,
  const std::vector<std::string>& pMasqueradingVector,
  std::string& err
)
{
  if(pMasqueradingVector.size() != 9)
  {
    err = "Bad masquerading vector";
    return false;
  }
  try
  {
    if(! pMasqueradingVector [0].empty() && pJson.isMember(pMasqueradingVector [0]))
    {
      if(! validJsonOfField(
           0,
           pMasqueradingVector [0],
           pJson [pMasqueradingVector [0]],
           err,
           false
         ))
      {
        return false;
      }
    }
    else
    {
      err =
        "The value of primary key must be set in the json object for update";
      return false;
    }
    if(! pMasqueradingVector [1].empty() && pJson.isMember(pMasqueradingVector [1]))
    {
      if(! validJsonOfField(
           1,
           pMasqueradingVector [1],
           pJson [pMasqueradingVector [1]],
           err,
           false
         ))
      {
        return false;
      }
    }
    if(! pMasqueradingVector [2].empty() && pJson.isMember(pMasqueradingVector [2]))
    {
      if(! validJsonOfField(
           2,
           pMasqueradingVector [2],
           pJson [pMasqueradingVector [2]],
           err,
           false
         ))
      {
        return false;
      }
    }
    if(! pMasqueradingVector [3].empty() && pJson.isMember(pMasqueradingVector [3]))
    {
      if(! validJsonOfField(
           3,
           pMasqueradingVector [3],
           pJson [pMasqueradingVector [3]],
           err,
           false
         ))
      {
        return false;
      }
    }
    if(! pMasqueradingVector [4].empty() && pJson.isMember(pMasqueradingVector [4]))
    {
      if(! validJsonOfField(
           4,
           pMasqueradingVector [4],
           pJson [pMasqueradingVector [4]],
           err,
           false
         ))
      {
        return false;
      }
    }
    if(! pMasqueradingVector [5].empty() && pJson.isMember(pMasqueradingVector [5]))
    {
      if(! validJsonOfField(
           5,
           pMasqueradingVector [5],
           pJson [pMasqueradingVector [5]],
           err,
           false
         ))
      {
        return false;
      }
    }
    if(! pMasqueradingVector [6].empty() && pJson.isMember(pMasqueradingVector [6]))
    {
      if(! validJsonOfField(
           6,
           pMasqueradingVector [6],
           pJson [pMasqueradingVector [6]],
           err,
           false
         ))
      {
        return false;
      }
    }
    if(! pMasqueradingVector [7].empty() && pJson.isMember(pMasqueradingVector [7]))
    {
      if(! validJsonOfField(
           7,
           pMasqueradingVector [7],
           pJson [pMasqueradingVector [7]],
           err,
           false
         ))
      {
        return false;
      }
    }
    if(! pMasqueradingVector [8].empty() && pJson.isMember(pMasqueradingVector [8]))
    {
      if(! validJsonOfField(
           8,
           pMasqueradingVector [8],
           pJson [pMasqueradingVector [8]],
           err,
           false
         ))
      {
        return false;
      }
    }
  }
  catch(const Json::LogicError& e)
  {
    err = e.what();
    return false;
  }
  return true;
}

bool
Account::validJsonOfField(
  size_t index,
  const std::string& fieldName,
  const Json::Value& pJson,
  std::string& err,
  bool isForCreation
)
{
  switch(index)
  {
    case 0:
      if(pJson.isNull())
      {
        err = "The " + fieldName + " column cannot be null";
        return false;
      }
      if(! pJson.isInt64())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      break;
    case 1:
      if(pJson.isNull())
      {
        err = "The " + fieldName + " column cannot be null";
        return false;
      }
      if(! pJson.isString())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      break;
    case 2:
      if(pJson.isNull())
      {
        return true;
      }
      if(! pJson.isInt64())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      break;
    case 3:
      if(pJson.isNull())
      {
        err = "The " + fieldName + " column cannot be null";
        return false;
      }
      if(! pJson.isString())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      // asString().length() creates a string object, is there any better way to
      // validate the length?
      if(pJson.isString() && pJson.asString().length() > 50)
      {
        err = "String length exceeds limit for the " + fieldName +
              " field (the maximum value is 50)";
        return false;
      }

      break;
    case 4:
      if(pJson.isNull())
      {
        err = "The " + fieldName + " column cannot be null";
        return false;
      }
      if(! pJson.isString())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      // asString().length() creates a string object, is there any better way to
      // validate the length?
      if(pJson.isString() && pJson.asString().length() > 50)
      {
        err = "String length exceeds limit for the " + fieldName +
              " field (the maximum value is 50)";
        return false;
      }

      break;
    case 5:
      if(pJson.isNull())
      {
        err = "The " + fieldName + " column cannot be null";
        return false;
      }
      if(! pJson.isString())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      // asString().length() creates a string object, is there any better way to
      // validate the length?
      if(pJson.isString() && pJson.asString().length() > 50)
      {
        err = "String length exceeds limit for the " + fieldName +
              " field (the maximum value is 50)";
        return false;
      }

      break;
    case 6:
      if(pJson.isNull())
      {
        err = "The " + fieldName + " column cannot be null";
        return false;
      }
      if(! pJson.isString())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      // asString().length() creates a string object, is there any better way to
      // validate the length?
      if(pJson.isString() && pJson.asString().length() > 32)
      {
        err = "String length exceeds limit for the " + fieldName +
              " field (the maximum value is 32)";
        return false;
      }

      break;
    case 7:
      if(pJson.isNull())
      {
        err = "The " + fieldName + " column cannot be null";
        return false;
      }
      if(! pJson.isBool())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      break;
    case 8:
      if(pJson.isNull())
      {
        return true;
      }
      if(! pJson.isString())
      {
        err = "Type error in the " + fieldName + " field";
        return false;
      }
      // asString().length() creates a string object, is there any better way to
      // validate the length?
      if(pJson.isString() && pJson.asString().length() > 36)
      {
        err = "String length exceeds limit for the " + fieldName +
              " field (the maximum value is 36)";
        return false;
      }

      break;
    default:
      err = "Internal error in the server";
      return false;
  }
  return true;
}

// NOLINTEND
